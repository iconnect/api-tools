language: c

# explicitly request container-based infrastructure
sudo: false

matrix:
  include:
    - env: CABALVER=1.22 GHCVER=7.8.4 ALEXVER=3.1.3 HAPPYVER=1.19.4
      addons: {apt: {packages: [cabal-install-1.22,ghc-7.8.4,alex-3.1.3,happy-1.19.4], sources: [hvr-ghc]}}
    - env: CABALVER=1.22 GHCVER=7.10.1 ALEXVER=3.1.3 HAPPYVER=1.19.4
      addons: {apt: {packages: [cabal-install-1.22,ghc-7.10.1,alex-3.1.3,happy-1.19.4],sources: [hvr-ghc]}}
    - env: CABALVER=1.24 GHCVER=8.0.1 ALEXVER=3.1.7 HAPPYVER=1.19.5
      addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.1,alex-3.1.7,happy-1.19.5],sources: [hvr-ghc]}}

before_install:
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$PATH

install:
 - cabal --version
 - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
 - travis_retry cabal update
 - sed -i 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
 - if [ $GHCVER = "8.0.1" ]; then export ALLOW_NEWER=--allow-newer=base,ghc-prim; fi
 - cabal install --only-dependencies $ALLOW_NEWER --enable-tests --enable-benchmarks

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - cabal configure --enable-tests --enable-benchmarks -v2  # -v2 provides useful information for debugging
 - cabal build   # this builds all libraries and executables (including tests/benchmarks)
 - cabal test
 - cabal check || echo "cabal check failed" # fails, because we use the -main-is GHC option
 - cabal sdist   # tests that a source-distribution can be generated

# Check that the resulting source distribution can be built & installed.
# If there are no other `.tar.gz` files in `dist`, this can be even simpler:
# `cabal install --force-reinstalls dist/*-*.tar.gz`
 - SRC_TGZ=$(cabal info . | awk '{print $2;exit}').tar.gz &&
   (cabal install --force-reinstalls "dist/$SRC_TGZ")
